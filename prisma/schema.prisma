generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id               String         @id @default(uuid())
  email            String?        @unique
  phoneNumber      String?        @unique
  authMethod       AuthMethod
  firstName        String
  lastName         String
  password         String
  role             Role           @default(USER)
  isVerified       Boolean        @default(false)
  verificationToken String?
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  addresses        Address[]
  appointments     Appointment[]
  editedPosts      BlogPost[]     @relation("LastEditor") // This one is correct, leave it.
  cart             CartItem[]
  consultations    Consultation[]
  sentInvitations  Invitation[]
  orders           Order[]
  reviews          Review[]
  wishlist         WishlistItem[]

  @@index([email])
  @@index([phoneNumber])
}
model AuthorProfile {
  id             String  @id @default(uuid())  
  name           String 
  bio            String? @db.Text
  profilePicture String?
  socialLinks    Json?   // e.g., { "twitter": "url", "linkedin": "url" }
  // An author can have many blog posts (this relation remains)
  blogPosts BlogPost[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invitation {
  id          String           @id @default(uuid())
  email       String           @unique
  role        Role
  token       String           @unique
  expiresAt   DateTime
  status      InvitationStatus @default(PENDING)
  invitedById String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  invitedBy   User?            @relation(fields: [invitedById], references: [id])
}

model VerificationCode {
  id          String    @id @default(uuid())
  code        String
  phoneNumber String?
  email       String?
  isUsed      Boolean   @default(false)
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  attempts    Int       @default(0)
  usedAt      DateTime?

  @@index([phoneNumber])
  @@index([email])
}

model Address {
  id         String   @id @default(uuid())
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders     Order[]
}

model Product {
  id                String            @id @default(uuid())
  title             String
  description       String
  shortDescription  String?
  weight            Float?
  size              String?
  price             Float
  comparePrice      Float?
  sku               String            @unique
  status            ProductStatus     @default(DRAFT)
  rating            Float?            @default(0)
  stockQuantity     Int               @default(0)
  lowStockThreshold Int               @default(10)
  isBestSeller      Boolean           @default(false)
  isNewProduct      Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  categoryId        String?
  taxCategoryId     String?
  madeOf            String?
  includes          String?
  seoTitle          String?
  seoDescription    String?
  internalNotes     String?
  cartItems         CartItem[]
  orderItems        OrderItem[]
  category          Category?         @relation(fields: [categoryId], references: [id])
  taxCategory       TaxCategory?      @relation(fields: [taxCategoryId], references: [id])
  productDiscounts  ProductDiscount[]
  faqs              ProductFAQ[]
  images            ProductImage[]
  variants          ProductVariant[]
  reviews           Review[]
  wishlistItems     WishlistItem[]
  tags              ProductTag[]      @relation("ProductToProductTag")

  @@index([categoryId])
  @@index([taxCategoryId])
  @@index([status])
  @@index([isBestSeller])
  @@index([isNewProduct])
}

model ProductVariant {
  id            String      @id @default(uuid())
  name          String
  sku           String      @unique
  price         Float
  stockQuantity Int
  attributes    Json
  productId     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  alt       String?
  position  Int      @default(0)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductTag {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("ProductToProductTag")
}

model ProductFAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String
  productId String
  position  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Category {
  id            String             @id @default(uuid())
  name          String
  description   String?
  slug          String             @unique
  image         String?
  parentId      String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  parent        Category?          @relation("CategorySubcategories", fields: [parentId], references: [id])
  subcategories Category[]         @relation("CategorySubcategories")
  discounts     CategoryDiscount[]
  products      Product[]

  @@index([parentId])
}

model Service {
  id          String          @id @default(uuid())
  name        String
  description String?
  slug        String          @unique
  image       String?
  isActive    Boolean         @default(true)
  position    Int             @default(0)
  parentId    String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  depth       Int             @default(0)
  path        String[]
  components  PageComponent[]
  parent      Service?        @relation("ServiceHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Service[]       @relation("ServiceHierarchy")

  @@unique([parentId, position])
  @@index([parentId])
  @@index([isActive])
  @@index([depth])
}

model PageComponent {
  id             String            @id @default(uuid())
  order          Int
  type           PageComponentType
  content        Json
  styleVariant   String?
  serviceId      String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  carouselImages CarouselImage[]
  service        Service           @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId, order])
}

model CarouselImage {
  id              String        @id @default(uuid())
  imageUrl        String
  altText         String?
  caption         String?
  order           Int
  pageComponentId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  pageComponent   PageComponent @relation(fields: [pageComponentId], references: [id], onDelete: Cascade)

  @@index([pageComponentId, order])
}

model Order {
  id              String        @id @default(uuid())
  orderNumber     String        @unique
  userId          String
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  addressId       String
  subtotal        Float
  tax             Float
  shippingCost    Float
  discount        Float         @default(0)
  total           Float
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  shippingAddress Address       @relation(fields: [addressId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  items           OrderItem[]

  @@index([userId])
  @@index([status])
}

model OrderItem {
  id               String          @id @default(uuid())
  orderId          String
  productId        String
  productVariantId String?
  quantity         Int
  price            Float
  total            Float
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  order            Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product          Product         @relation(fields: [productId], references: [id])
  variant          ProductVariant? @relation(fields: [productVariantId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model CartItem {
  id               String          @id @default(uuid())
  userId           String
  productId        String
  productVariantId String?
  quantity         Int
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  product          Product         @relation(fields: [productId], references: [id])
  variant          ProductVariant? @relation(fields: [productVariantId], references: [id])
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model Review {
  id        String       @id @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  status    ReviewStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  product   Product      @relation(fields: [productId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([productId])
}

model Discount {
  id               String                @id @default(uuid())
  name             String
  code             String                @unique
  description      String?
  discountType     DiscountType
  discountValue    Float
  applicability    DiscountApplicability
  minimumPurchase  Float?
  maximumDiscount  Float?
  validFrom        DateTime
  validTo          DateTime
  isActive         Boolean               @default(true)
  usageLimit       Int?
  usageCount       Int                   @default(0)
  perUserLimit     Int?
  minQuantity      Int?
  newDaysThreshold Int?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  categories       CategoryDiscount[]
  products         ProductDiscount[]
}

model ProductDiscount {
  productId  String
  discountId String
  discount   Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, discountId])
}

model CategoryDiscount {
  categoryId String
  discountId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  discount   Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)

  @@id([categoryId, discountId])
}

model UserDiscountUsage {
  id         String   @id @default(uuid())
  userId     String
  discountId String
  usageCount Int      @default(0)
  lastUsed   DateTime @default(now())

  @@unique([userId, discountId])
  @@index([userId])
  @@index([discountId])
}

model BlogPost {
  id              String        @id @default(uuid())
  title           String
  slug            String        @unique
  content         Json          // Tiptap JSON content
  excerpt         String?       @db.Text
  featuredImage   String?
  status          BlogStatus    @default(DRAFT)
  publishedAt     DateTime?
  
  // THIS IS THE CORRECT AUTHOR RELATIONSHIP
  authorId        String
  author          AuthorProfile @relation(fields: [authorId], references: [id])

  category        BlogCategory? @relation(fields: [categoryId], references: [id])
  categoryId      String?
  tags            BlogTag[]     @relation("BlogPostToBlogTag")
  readingTime     Int?          // Estimated reading time in minutes
  views           Int           @default(0)
  isLocked        Boolean       @default(false)
  lockedBy        String?       // User ID who locked the post
  lockedAt        DateTime?
  
  // SEO fields
  seoTitle        String?
  seoDescription  String?       @db.Text
  
  // Version control
  version         Int           @default(1)
  lastEditedBy    User?         @relation("LastEditor", fields: [lastEditedById], references: [id])
  lastEditedById  String?
  
  // Auto-save drafts
  autosaveDraft   Json?
  autosavedAt     DateTime?
  
  // Relations
  faqs            BlogFAQ[]
  analytics       BlogAnalytics[]
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([authorId])
  @@index([categoryId])
  @@index([status])
  @@index([publishedAt])
  @@index([slug])
}

model BlogCategory {
  id          String     @id @default(uuid())
  name        String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  color       String?
  description String?
  slug        String     @unique
  posts       BlogPost[]
}

model BlogTag {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  color     String?
  slug      String     @unique
  posts     BlogPost[] @relation("BlogPostToBlogTag")
}

model BlogAnalytics {
  id        String   @id @default(uuid())
  postId    String
  event     String
  userAgent String?
  ipAddress String?
  referrer  String?
  createdAt DateTime @default(now())
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([event])
  @@index([createdAt])
}

model BlogFAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String   @db.Text
  order     Int      @default(0)

  // Relation to the BlogPost
  postId String
  post   BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId, order])
}

model Testimonial {
  id               String        @id @default(uuid())
  title            String?
  content          String
  author           String
  avatar           String?
  rating           Int?
  shortDescription String?
  status           ContentStatus @default(DRAFT)
  position         Int           @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model GalleryCategory {
  id        String        @id @default(uuid())
  name      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  items     GalleryItem[]
}

model GalleryItem {
  id          String           @id @default(uuid())
  title       String
  description String?
  imageUrl    String
  categoryId  String?
  stars       Int?
  position    Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    GalleryCategory? @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
}

model NewsArticle {
  id               String        @id @default(uuid())
  title            String
  shortDescription String?
  content          String
  previewImage     String?
  status           ContentStatus @default(DRAFT)
  publishedDate    DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model ContactMessage {
  id        String        @id @default(uuid())
  name      String
  email     String
  phone     String?
  subject   String?
  message   String
  status    ContactStatus @default(NEW)
  reply     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Appointment {
  id        String            @id @default(uuid())
  userId    String
  date      DateTime
  status    AppointmentStatus @default(PENDING)
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  user      User              @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Consultation {
  id        String             @id @default(uuid())
  userId    String
  date      DateTime
  status    ConsultationStatus @default(PENDING)
  notes     String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id])

  @@index([userId])
}

model SiteSettings {
  id           String   @id @default(uuid())
  settingKey   String   @unique
  settingValue String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model SalesRecord {
  id        String   @id @default(uuid())
  date      DateTime
  revenue   Float
  orders    Int
  customers Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([date])
}

model InventoryLog {
  id        String   @id @default(uuid())
  action    String
  quantity  Int
  productId String
  variant   String?
  notes     String?
  createdAt DateTime @default(now())

  @@index([productId])
}

model MarketingBanner {
  id          String    @id @default(uuid())
  title       String
  description String?
  imageUrl    String
  linkUrl     String?
  isActive    Boolean   @default(true)
  position    Int       @default(0)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Partner {
  id        String   @id @default(uuid())
  name      String
  logo      String
  website   String?
  isActive  Boolean  @default(true)
  position  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentGateway {
  id             String   @id @default(uuid())
  name           String
  isActive       Boolean  @default(false)
  configSettings Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ShippingProvider {
  id             String   @id @default(uuid())
  name           String
  isActive       Boolean  @default(false)
  configSettings Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model TaxCategory {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
  taxRates    TaxRate[] @relation("TaxCategoryToTaxRate")
}

model TaxRate {
  id            String        @id @default(uuid())
  name          String
  rate          Float
  country       String
  state         String?
  zipCode       String?
  priority      Int           @default(1)
  isCompound    Boolean       @default(false)
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  taxCategories TaxCategory[] @relation("TaxCategoryToTaxRate")

  @@index([country, state, zipCode])
}

model SecurityLog {
  id        String             @id @default(cuid())
  createdAt DateTime           @default(now())
  eventType String
  level     SecurityEventLevel
  actor     String?
  ipAddress String?
  userAgent String?
  details   Json

  @@index([createdAt])
  @@index([eventType])
  @@index([actor])
}

enum Role {
  ADMIN
  EDITOR
  USER
}

enum AuthMethod {
  EMAIL
  PHONE
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PageComponentType {
  HEADING
  TEXT_BLOCK
  IMAGE
  IMAGE_CAROUSEL
  VIDEO_EMBED
  REVIEW_CARD
  ARTICLE_GRID
  QUOTE_BLOCK
  CTA_BUTTON
  SPACER
  DIVIDER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum DiscountApplicability {
  ALL_PRODUCTS
  SPECIFIC_PRODUCTS
  SPECIFIC_CATEGORIES
  NEW_PRODUCTS
  BEST_SELLERS
  FIRST_PURCHASE
  BUNDLE
  VOLUME
}

enum BlogStatus {
  DRAFT
  IN_REVIEW
  PUBLISHED
  ARCHIVED
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESPONDED
  CLOSED
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum ConsultationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum SecurityEventLevel {
  INFO
  WARN
  ERROR
}
