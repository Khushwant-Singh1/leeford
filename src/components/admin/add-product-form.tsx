"use client";import { useState } from "react";import { Upload, X, Check } from "lucide-react";import Image from "next/image";import UploadPopup from "../UploadPopup";import { ProductStatus } from '@prisma/client';import { useMutation, useQuery } from "@tanstack/react-query";import { useRouter } from "next/navigation";import { categoryApi } from "@/lib/api/categories";import { Category } from "@/types/product-types";import { productsApi } from "@/lib/api/products";import { AddProductPayload } from "@/lib/api/products";import { productSchema } from "@/lib/validations/product-schema";export function AddProductForm() {  const [isUploadPopupOpen, setIsUploadPopupOpen] = useState(false);
  const [uploadError, setUploadError] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const router = useRouter();
  const [errors, setErrors] = useState<Record<string, string[] | undefined>>({});
  const [images, setImages] = useState<File[]>([]);  const [product, setProduct] = useState<Omit<AddProductPayload, 'images'> & { subcategoryId: string }>({    title: "",    description: "",    shortDescription: "",    price: 0,    comparePrice: 0,    sku: "",    categoryId: "",    subcategoryId: "",    stockQuantity: 0,    lowStockThreshold: 10,    isBestseller: false,    isNewProduct: true,    status: ProductStatus.DRAFT,    seoTitle: "",    seoDescription: "",  });  const handleAddImage = async (file: File) => {
    try {
      setIsUploading(true);
      setUploadError(null);
      
      // Validate file size (e.g., 5MB limit)
      const maxSize = 5 * 1024 * 1024; // 5MB
      if (file.size > maxSize) {
        throw new Error('File size should be less than 5MB');
      }
      
      // Validate file type
      const validTypes = ['image/jpeg', 'image/png', 'image/webp'];
      if (!validTypes.includes(file.type)) {
        throw new Error('Only JPG, PNG, and WebP images are allowed');
      }
      
      setImages(prev => [...prev, file]);
      setIsUploadPopupOpen(false);
    } catch (error) {
      console.error('Upload error:', error);
      setUploadError(error instanceof Error ? error.message : 'Failed to upload image');
    } finally {
      setIsUploading(false);
    }
  };  const handleRemoveImage = (index: number) => {    setImages(prev => prev.filter((_, i) => i !== index));  };  const productMutation = useMutation({    mutationFn: (payload: AddProductPayload) => productsApi.addProduct(payload),    onSuccess: () => {      router.push(`/admin/products`);    },    onError: (error: any) => {      setErrors((prev: any) => ({ ...prev, sku: error.message || 'An unexpected error occurred' }))    }  });  const { data: categories = [], isLoading: isLoadingCategories } = useQuery({    queryKey: ["categories"],    queryFn: () => categoryApi.getAll(),  });  const saveProduct = async () => {    const validationResult = productSchema.safeParse(product);    const fieldErrors: Record<string, string[] | undefined> = {};    if (!validationResult.success) {      Object.assign(fieldErrors, validationResult.error.flatten().fieldErrors);    }    if (images.length === 0) {      fieldErrors.images = ["At least one image is required"];    }    if (Object.keys(fieldErrors).length > 0) {      setErrors(fieldErrors);      return;    }    setErrors({});    const payload: AddProductPayload = {      title: product.title || '',      description: product.description || '',      price: product.price || 0,      sku: product.sku || '',      stockQuantity: product.stockQuantity || 0,      status: product.status || 'DRAFT',      images: images,      isBestseller: product.isBestseller || false,      isNewProduct: product.isNewProduct || false,      shortDescription: product.shortDescription,      comparePrice: product.comparePrice,      lowStockThreshold: product.lowStockThreshold,      categoryId: product.subcategoryId || product.categoryId,      seoTitle: product.seoTitle,      seoDescription: product.seoDescription    };    productMutation.mutate(payload);  };  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {    const { name, value, type } = e.target;    if (type === 'checkbox') {      const { checked } = e.target as HTMLInputElement;      setProduct(prev => ({ ...prev, [name]: checked }));    } else if (['price', 'comparePrice', 'stockQuantity', 'lowStockThreshold', 'weight', 'rating'].includes(name)) {      setProduct(prev => ({ ...prev, [name]: parseFloat(value) || 0 }));    } else {      setProduct(prev => ({ ...prev, [name]: value }));    }  };  return (    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">      <div className="lg:col-span-2 space-y-6">        <div className="bg-white rounded-lg p-6 shadow-sm">          <h2 className="text-lg font-medium mb-4 text-[#4f507f]">            Product Information          </h2>          <div className="space-y-4">            <div>              <label className="block text-sm font-medium text-gray-700 mb-1">                Product Title              </label>              <input                type="text"                name="title"                value={product.title || ''}                onChange={handleChange}                className="w-full px-3 py-2 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4f507f]"                placeholder="Enter product title"              />              {errors.title && (                <p className="text-red-500 text-xs">{errors.title[0]}</p>              )}            </div>            <div>              <label className="block text-sm font-medium text-gray-700 mb-1">                Long Description              </label>              <textarea                rows={6}                name="description"                value={product.description || ''}                onChange={handleChange}                className="w-full px-3 py-2 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4f507f]"                placeholder="Enter detailed product description"              />              {errors.description && (                <p className="text-red-500 text-xs">{errors.description[0]}</p>              )}            </div>                        <div>              <label className="block text-sm font-medium text-gray-700 mb-1">                Short Description              </label>              <textarea                rows={3}                name="shortDescription"                value={product.shortDescription || ''}                onChange={handleChange}                className="w-full px-3 py-2 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4f507f]"                placeholder="Enter short description for product preview"              />            </div>            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">              <div>                <label className="block text-sm font-medium text-gray-700 mb-1">                  Price                </label>                <input                  type="number"                  name="price"                  value={product.price || ''}                  onChange={handleChange}                  className="w-full px-3 py-2 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4f507f]"                  placeholder="0.00"                  step="0.01"                />                {errors.price && (                  <p className="text-red-500 text-xs">{errors.price[0]}</p>                )}              </div>              <div>                <label className="block text-sm font-medium text-gray-700 mb-1">                  Compare At Price                </label>                <input                  type="number"                  name="comparePrice"                  value={product.comparePrice || ''}                  onChange={handleChange}                  className="w-full px-3 py-2 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4f507f]"                  placeholder="0.00"                  step="0.01"                />              </div>            </div>            <div>              <label className="block text-sm font-medium text-gray-700 mb-1">                SKU              </label>              <input                type="text"                name="sku"                value={product.sku || ''}                onChange={handleChange}                className="w-full px-3 py-2 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4f507f]"                placeholder="Enter product SKU"              />              {errors.sku && (                <p className="text-red-500 text-xs">{errors.sku[0]}</p>              )}            </div>            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">              <div>                <label className="block text-sm font-medium text-gray-700 mb-1">                  Stock Quantity                </label>                <input                  type="number"                  name="stockQuantity"                  value={product.stockQuantity || 0}                  onChange={handleChange}                  className="w-full px-3 py-2 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4f507f]"                  placeholder="0"                />                {errors.stockQuantity && (                  <p className="text-red-500 text-xs">{errors.stockQuantity[0]}</p>                )}              </div>              <div>                <label className="block text-sm font-medium text-gray-700 mb-1">                  Low Stock Threshold                </label>                <input                  type="number"                  name="lowStockThreshold"                  value={product.lowStockThreshold || 0}                  onChange={handleChange}                  className="w-full px-3 py-2 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4f507f]"                  placeholder="10"                />              </div>            </div>          </div>        </div>        <div className="bg-white rounded-lg p-6 shadow-sm">          <h2 className="text-lg font-medium mb-4 text-[#4f507f]">SEO Settings</h2>          <div className="space-y-4">            <div>              <label className="block text-sm font-medium text-gray-700 mb-1">                SEO Title              </label>              <input                type="text"                name="seoTitle"                value={product.seoTitle || ''}                onChange={handleChange}                className="w-full px-3 py-2 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4f507f]"                placeholder="SEO optimized title"              />            </div>            <div>              <label className="block text-sm font-medium text-gray-700 mb-1">                SEO Description              </label>              <textarea                rows={3}                name="seoDescription"                value={product.seoDescription || ''}                onChange={handleChange}                className="w-full px-3 py-2 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4f507f]"                placeholder="SEO meta description"              />            </div>          </div>        </div>      </div>      <div className="space-y-6">        <div className="bg-white rounded-lg p-6 shadow-sm">          <h2 className="text-lg font-medium mb-4 text-[#4f507f]">Status</h2>          <select            name="status"            value={product.status}            onChange={handleChange}            className="w-full p-2 border border-gray-300 rounded-md"          >            <option value={ProductStatus.DRAFT}>Draft</option>            <option value={ProductStatus.PUBLISHED}>Published</option>            <option value={ProductStatus.ARCHIVED}>Archived</option>          </select>        </div>        <div className="bg-white rounded-lg p-6 shadow-sm">          <h2 className="text-lg font-medium mb-4 text-[#4f507f]">Categories</h2>          <div className="space-y-2">            {isLoadingCategories ? (              <div>Loading categories...</div>            ) : (              <div className="space-y-2">                {categories.filter((cat: Category) => !cat.parentId).map((category: Category) => {                  const subcategories = categories.filter(                    (subcat: Category) => subcat.parentId === category.id                  );                                    return (                    <div key={category.id} className="space-y-1">                      {/* Parent category */}                      <div                        onClick={() =>                          setProduct({                            ...product,                            categoryId: category.id,                            subcategoryId: ''                          })                        }                        className={`flex items-center gap-2 p-2 rounded-md cursor-pointer ${                          product.categoryId === category.id && !product.subcategoryId                            ? "bg-[#edeefc] text-[#4f507f]"                            : "hover:bg-gray-100"                        }`}                      >                        <div                          className={`w-5 h-5 rounded-md flex items-center justify-center ${                            product.categoryId === category.id && !product.subcategoryId                              ? "bg-[#4f507f] text-white"                              : "border border-gray-300"                          }`}                        >                          {product.categoryId === category.id && !product.subcategoryId && (                            <Check size={14} />                          )}                        </div>                        <span className="font-medium">{category.name}</span>                      </div>                                            {/* Subcategories */}                      {subcategories.length > 0 && (                        <div className="pl-6 space-y-1">                          {subcategories.map((subcategory: Category) => (                            <div                              key={subcategory.id}                              onClick={(e) => {                                e.stopPropagation();                                setProduct({                                   ...product,                                   categoryId: category.id,                                  subcategoryId: subcategory.id                                });                              }}                              className={`flex items-center gap-2 p-2 rounded-md cursor-pointer ${                                product.subcategoryId === subcategory.id                                  ? "bg-[#edeefc] text-[#4f507f]"                                  : "hover:bg-gray-100"                              }`}                            >                              <div                                className={`w-5 h-5 rounded-md flex items-center justify-center ${                                  product.subcategoryId === subcategory.id                                    ? "bg-[#4f507f] text-white"                                    : "border border-gray-300"                                }`}                              >                                {product.subcategoryId === subcategory.id && (                                  <Check size={14} />                                )}                              </div>                              <span>— {subcategory.name}</span>                            </div>                          ))}                        </div>                      )}                    </div>                  );                })}              </div>            )}          </div>        </div>        <div className="bg-white rounded-lg p-6 shadow-sm">          <h2 className="text-lg font-medium mb-4 text-[#4f507f]">Product Flags</h2>          <div className="space-y-4">            <div className="flex items-center gap-2">              <input                type="checkbox"                id="is-bestseller"                name="isBestseller"                checked={product.isBestseller}                onChange={handleChange}                className="w-4 h-4 text-[#4f507f] bg-gray-100 border-gray-300 rounded focus:ring-[#4f507f] focus:ring-2"              />              <label htmlFor="is-bestseller" className="text-sm text-gray-700">                Mark as Bestseller              </label>            </div>            <div className="flex items-center gap-2">              <input                type="checkbox"                id="is-new-product"                name="isNewProduct"                checked={product.isNewProduct}                onChange={handleChange}                className="w-4 h-4 text-[#4f507f] bg-gray-100 border-gray-300 rounded focus:ring-[#4f507f] focus:ring-2"              />              <label htmlFor="is-new-product" className="text-sm text-gray-700">                Mark as New Product              </label>            </div>          </div>        </div>        <div className="bg-white rounded-lg p-6 shadow-sm">          <h2 className="text-lg font-medium mb-4 text-[#4f507f]">Product Images</h2>          <div className="space-y-4">            <div className="grid grid-cols-2 gap-2">              {images.map((file, index) => (                <div key={index} className="relative group">                  <Image                    src={URL.createObjectURL(file)}                    alt={`Product ${index + 1}`}                    width={100}                    height={100}                    className="w-full h-24 object-cover rounded-md border"                  />                  <button                    onClick={() => handleRemoveImage(index)}                    className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"                  >                    <X size={14} />                  </button>                </div>              ))}            </div>            <button              onClick={() => setIsUploadPopupOpen(true)}              className="w-full p-4 border-2 border-dashed border-gray-300 rounded-md hover:border-[#4f507f] transition-colors flex items-center justify-center gap-2 text-gray-600 hover:text-[#4f507f]"            >              <Upload size={20} />              Add Image            </button>            {errors.images && (              <p className="text-red-500 text-xs">{errors.images[0]}</p>            )}          </div>        </div>        <div className="flex gap-3">          <button            onClick={saveProduct}            disabled={productMutation.isPending}            className="flex-1 bg-[#4f507f] text-white px-4 py-2 rounded-md hover:bg-[#3f4167] disabled:opacity-50 disabled:cursor-not-allowed"          >            {productMutation.isPending ? "Saving..." : "Save Product"}          </button>          <button            onClick={() => router.push('/admin/products')}            className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"          >            Cancel          </button>        </div>      </div>      {isUploadPopupOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium">Upload Image</h3>
              <button
                onClick={() => {
                  setIsUploadPopupOpen(false);
                  setUploadError(null);
                }}
                className="text-gray-500 hover:text-gray-700"
                disabled={isUploading}
              >
                <X size={20} />
              </button>
            </div>
            
            {uploadError && (
              <div className="mb-4 p-3 bg-red-50 text-red-700 rounded-md text-sm">
                {uploadError}
              </div>
            )}
            
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
              <Upload className="mx-auto h-12 w-12 text-gray-400 mb-3" />
              <p className="text-sm text-gray-600 mb-4">
                Drag and drop your image here, or click to browse
              </p>
              <p className="text-xs text-gray-500 mb-4">
                Supported formats: JPG, PNG, WebP (Max 5MB)
              </p>
              
              <label className="inline-block px-4 py-2 bg-[#4f507f] text-white rounded-md cursor-pointer hover:bg-[#3f4167] disabled:opacity-50 disabled:cursor-not-allowed">
                {isUploading ? 'Uploading...' : 'Select Image'}
                <input
                  type="file"
                  className="hidden"
                  accept="image/jpeg, image/png, image/webp"
                  onChange={async (e) => {
                    const file = e.target.files?.[0];
                    if (file) {
                      await handleAddImage(file);
                    }
                  }}
                  disabled={isUploading}
                />
              </label>
            </div>
            
            <div className="mt-4 flex justify-end gap-2">
              <button
                onClick={() => {
                  setIsUploadPopupOpen(false);
                  setUploadError(null);
                }}
                className="px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-md"
                disabled={isUploading}
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}    </div>  );}